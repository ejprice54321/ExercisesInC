# Exercise 3
## C strings

Reading: Chapter 2.5 of *Head First C*.

The goal of this exercise is to give you more practice in C, and
practice using C libraries.

C provides a basic string type in the form of character
arrays/pointers, and string.h provides a set of basic string
manipulation functions.  In addition, there are many libraries that
provide strings types with additional features.  You can read about
some of them [here](http://www.and.org/vstr/comparison).

1) In this directory you should find `find_track.c`, which is a
version of the code from Chapter 2.5 of *Head First C*, with a little
cleanup.  Compile and run it.

If you read the code, you'll see a function named `find_track_regex`
that is mostly empty.  Your job is to fill it in.

2) `regex.h` provides functions for performing regular expression
matching on strings.  Read [the
documentation](http://pubs.opengroup.org/onlinepubs/7908799/xsh/regex.h.html)
and search for examples.

Fill in the body of `find_track_regex` and modify `main` to test it.
For example, the regular expression `[A-F]` should match any track
that contains one of the capital letters `A`-`F`.

3) Check your code quality:

*  If you call a library function that might return an error code, check the return value.  In case of an error, print an appropriate message and exit(1).

*  If you call regcomp, you should call regfree when you are done.

*  As always, every function should have a function-level comment that explains what it does, but not how.  Additional comments inside the function should explain anything non-obvious about how the function works.


4) Push your modified file back to the repo.

## Chapter 3


### Virtual memory

1) The Georgian alphabet has 33 letters.  How many bit are needed to specify a letter?

log233

2) In the UTF-16 character encoding, the binary representation of a character can take up to 32 bits. Ignoring the details of the encoding scheme, how many different characters can be represented?

4294967296

3) What is the difference between "memory" and "storage" as defined in Think OS?

Memory is used to store short-term data, typically kept in the RAM, and is volatile, so it is lost when the computer shuts down. Storage is used for long-term storage, kept in the physical drive, and non-volatile.

4) What is the difference between a GiB and a GB?  What is the percentage difference in their sizes?

A GiB is a gibibyte and a GB is a gigabyte, 2^30 and 10^9 bytes respectively. They have a 7% difference in size.

5) How does the virtual memory system help isolate processes from each other?

"a process cannot access data belonging to another process, because there is no virtual address it can generate that maps to physical memory allocated to another proces"

6) Why do you think the stack and the heap are usually located at opposite ends of the address space?

This allows them to grow in directions away from each other as they expand.

7) What Python data structure would you use to represent a sparse array?

Dictionary

8) What is a context switch?

A context switch is the mechanism that allows the operating system to to interrupt a running process, save its state, and run another process.

In this directory, you should find a subdirectory named `aspace` that contains `aspace.c`.  Run it on your computer and compare your results to mine.

Address of main is 0x40057d
Address of global is 0x60104c
Address of local is 0x7fffa0899044
Address of p is 0x2463010
  
1) Add a second call to `malloc` and check whether the heap on your system grows up (toward larger addresses).

Yes

2) Add a function that prints the address of a local variable, and check whether the stack grows down. 

No

3) Choose a random number between 1 and 32, and allocate two chunks with that size.  
How much space is there between them?  Hint: Google knows how to subtract hexadecimal numbers.

32 in decimal and 0x20 in hexadecimal
